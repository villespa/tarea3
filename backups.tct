std::pair<std::vector<Enemigo>, Boss> Otros::cargarEnemigosMazmorraElegidaCSV(long unsigned int seleccionMazmorra) {
    std::vector<Enemigo> enemigos;
    Boss jefe;
    std::ifstream archivo("/home/pbn/tarea3/enemigos.csv");
    
    if (!archivo.is_open()) {
        std::cerr << "Error al abrir el archivo: " << "/home/pbn/tarea3/enemigos.csv" << std::endl;
        return std::make_pair(enemigos, jefe);
    }
    
    std::cout << "Cargando enemigos de la mazmorra #" << seleccionMazmorra << "..." << std::endl;


    std::string linea;
    long unsigned int numLinea = 0;

    while (std::getline(archivo, linea)) {
        numLinea++;
        std::cout << "\n=== Procesando línea " << numLinea << " ===\n" << std::endl;
        if (numLinea == seleccionMazmorra+1) {
            std::string valor;
            std::stringstream ss(linea);
            while (std::getline(ss, valor, ',') /*, esString(valor)*/) { // aqui quiero salir del loop cuando entre comas hay un string y no un char

                std::cout << "\n=== Procesando enemigos de mazmorra #" << seleccionMazmorra+1 << " ===\n" << std::endl;    

                int x, y, vida, dano, frecuenciaAtaque, numMovimientos = 0;
                int rangoAtaque = 0;
                std::vector<std::pair<int,int>> patronMovimiento;
                
                // Leer las propiedades de enemigos
                std::getline(ss, valor, ',');
                y = std::stoi(valor);
                std::cout << "Posición Y: " << y << std::endl;
                
                std::getline(ss, valor, ',');
                x = std::stoi(valor);
                std::cout << "Posición X: " << x << std::endl;

                std::getline(ss, valor, ',');
                numMovimientos = std::stoi(valor);
                std::cout << "Número de movimientos: " << numMovimientos << std::endl;

                std::cout << "Patrón de movimiento:" << std::endl;
                for (int i = 0; i < numMovimientos; i++) {
                    int xMovimiento, yMovimiento;
                    std::getline(ss, valor, ',');
                    yMovimiento = std::stoi(valor);
                    std::cout << "Posición Y: " << yMovimiento << std::endl;

                    std::getline(ss, valor, ',');
                    xMovimiento = std::stoi(valor);
                    std::cout << "Posición X: " << xMovimiento << std::endl;
                    
                    patronMovimiento.push_back(std::make_pair(yMovimiento, xMovimiento));
                }

                std::getline(ss, valor, ',');
                vida = std::stoi(valor);
                std::cout << "Vida: " << vida << std::endl;
                
                std::getline(ss, valor, ',');
                dano = std::stoi(valor);
                std::cout << "Daño: " << dano << std::endl;
                
                std::getline(ss, valor, ',');
                rangoAtaque = std::stoi(valor);
                std::cout << "Rango: " << rangoAtaque << std::endl;

                std::getline(ss, valor, ',');
                frecuenciaAtaque = std::stoi(valor);
                std::cout << "Frecuencia de ataque: " << frecuenciaAtaque << std::endl;
                
                // Crear el enemigo con el constructor y agregarlo al vector
                Enemigo enemigo(x, y, patronMovimiento, vida, dano, rangoAtaque, frecuenciaAtaque, numMovimientos);
            }
            // Leer el jefe

            std::string nombreJefe;
            int yJefe, xJefe, numMovimientosJefe, vidaJefe, danoJefe, rangoJefe, frecuenciaAtaqueJefe;
            std::vector<std::pair<int,int>> patronMovimientoJefe;

            std::getline(ss, valor, ',');
            nombreJefe = valor;
            std::cout << "Nombre del jefe: " << nombreJefe << std::endl;

            std::getline(ss, valor, ',');
            yJefe = std::stoi(valor);
            std::cout << "Posición Y: " << yJefe << std::endl;

            std::getline(ss, valor, ',');
            xJefe = std::stoi(valor);
            std::cout << "Posición X: " << xJefe << std::endl;
        
            std::getline(ss, valor, ',');
            numMovimientosJefe = std::stoi(valor);
            std::cout << "Número de movimientos: " << numMovimientosJefe << std::endl;

            std::cout << "Patrón de movimiento:" << std::endl;
            for (int i = 0; i < numMovimientosJefe; i++) {
                int xMovimiento, yMovimiento;
                std::getline(ss, valor, ',');
                yMovimiento = std::stoi(valor);
                std::cout << "Posición Y: " << yMovimiento << std::endl;
                
                std::getline(ss, valor, ',');
                xMovimiento = std::stoi(valor);
                std::cout << "Posición X: " << xMovimiento << std::endl;
                
                patronMovimientoJefe.push_back(std::make_pair(yMovimiento, xMovimiento));
            }

            std::getline(ss, valor, ',');
            vidaJefe = std::stoi(valor);
            std::cout << "Vida: " << vidaJefe << std::endl;

            std::getline(ss, valor, ',');
            danoJefe = std::stoi(valor);
            std::cout << "Daño: " << danoJefe << std::endl;

            std::getline(ss, valor, ',');
            rangoJefe = std::stoi(valor);
            std::cout << "Rango: " << rangoJefe << std::endl;

            std::getline(ss, valor, ',');
            frecuenciaAtaqueJefe = std::stoi(valor);
            std::cout << "Frecuencia de ataque: " << frecuenciaAtaqueJefe << std::endl;

            // Crear el jefe con el constructor
            jefe = Boss(xJefe, yJefe, patronMovimientoJefe, vidaJefe, danoJefe, rangoJefe, frecuenciaAtaqueJefe, nombreJefe);



        }
    }
    archivo.close();
    return std::make_pair(enemigos, jefe);
}





